#!/usr/bin/env python
# -*- coding: utf-8 -*-
from __future__ import absolute_import, division, print_function

from commands import getoutput
from glob import glob
import logging
import os
import sys

import neovim

# TODO: make it a general purpose editor (check out file type and open in appropriate program)

if os.path.isdir('/tmp/debug'):
    logging.basicConfig(filename='/tmp/debug/%s.log' % os.path.basename(__file__), level=logging.DEBUG)
_log = logging.getLogger(__name__)


def call(cmd):
    try:
        _log.info("Calling %s" % cmd)
        ret = os.system(cmd)
        _log.info("Got return value %d" % ret)
    except Exception:
        _log.exception("Error while calling %s" % cmd)


def get_neovim_sockets():
    sockets = []
    if 'XDG_RUNTIME_DIR' in os.environ:
        runtime_dir = os.path.expanduser(os.path.expandvars(os.environ['XDG_RUNTIME_DIR']))
        sockets += glob('%s/neovim/*' % runtime_dir)
    if not sockets:
        sockets += glob('/tmp/nvim*')
    return sockets


def get_neovim_instance(cwd):
    cwd = os.path.realpath(cwd)
    sockets = get_neovim_sockets()
    for socket in sockets:
        try:
            nvim = neovim.attach('socket', path=socket)
            nvim_cwd = nvim.eval('getcwd()')
            if os.path.realpath(nvim_cwd) in cwd:
                return nvim
        except Exception:
            _log.exception("Could not communicate with socket '%s'" % socket)


def main(args):
    cwd = os.getcwd()

    for i, arg in enumerate(args):
        if os.path.isfile(arg):
            args[i] = os.path.realpath(arg)
    args = ' '.join(args)  # TODO: support multiple files... need to iterate
    _log.info("Command called with args %r" % args)

    # First try to find a neovim instance
    nvim = get_neovim_instance(cwd)
    if nvim:
        try:
            nvim.command('edit %s' % args)
            return
        except Exception:
            _log.exception("Could not launch edit command to nvim")

    # Otherwise go the vim way
    servers = getoutput('/usr/bin/vim --serverlist').strip().splitlines()
    _log.info("Got servers: %r" % servers)

    server_name = os.path.realpath(cwd).upper()
    server_name_test = server_name

    while server_name_test != '/':
        # Recurse parents and check if a server name is found
        if server_name_test in servers:
            server_name = server_name_test
            break
        server_name_test = os.path.split(server_name_test)[0]

    _log.info("Use server name %s for cwd '%s'" % (server_name, cwd))

    if server_name in servers:
        # If a server with current path name exists, always use this one
        _log.info("Server %s is found in list" % server_name)
        call('/usr/bin/vim --servername "%s" --remote-tab %s' % (server_name, args))
    elif not sys.stdin.isatty():
        _log.info("Calling command not through a tty, so we'll start gvim")
        if os.environ.get('DESKTOP_SESSION') == 'qtile':
            call('qtile-agr --silent switch_group gvim')
        call('gvim --remote-tab %s' % args)
    elif 'nvim' in os.environ['PATH']:
        # When called explicitely, start nvim
        call('nvim %s' % args)
    else:
        # When called explicitely, create a server
        _log.info("Creating server %s" % server_name)
        call('vim --servername "%s" %s' % (server_name, args))


if __name__ == '__main__':
    args = sys.argv[1:]
    main(args)
