#!/usr/bin/env python
# -*- coding: utf-8 -*-
from __future__ import absolute_import, division, print_function

from commands import getoutput
from glob import glob
import logging
import os
import sys


# This should go below the imports but neovim breaks the logging configurations, should fix it one day...
if os.getenv('EDITOR_AGR_DEBUG'):
    logging.basicConfig(filename='/tmp/debug-%s.log' % os.path.basename(__file__), level=logging.INFO)
log = logging.getLogger(__name__)

try:
    import neovim
except ImportError:
    neovim = None

# TODO: make it a general purpose editor (check out file type and open in appropriate program)


def call(cmd):
    try:
        log.info("Calling %s" % cmd)
        ret = os.system(cmd)
        log.info("Got return value %d" % ret)
    except Exception:
        log.exception("Error while calling %s" % cmd)


def get_neovim_sockets():
    sockets = []
    if 'XDG_RUNTIME_DIR' in os.environ:
        runtime_dir = os.path.expanduser(os.path.expandvars(os.environ['XDG_RUNTIME_DIR']))
        sockets += glob('%s/neovim/*' % runtime_dir)
    if not sockets:
        sockets += glob('/tmp/nvim*')
    return sockets


def get_neovim_instance(cwd):
    nvim = None
    path = ''
    cwd = os.path.realpath(cwd)
    sockets = get_neovim_sockets()
    for socket in sockets:
        try:
            log.info("Trying to contact neovim socket %s ..." % socket)
            _nvim = neovim.attach('socket', path=socket)
            nvim_cwd = os.path.realpath(_nvim.eval('getcwd()'))
            log.info("   got cwd %s" % nvim_cwd)
            if nvim_cwd in cwd and len(nvim_cwd) > len(path):
                # Take longest match in order to select the more appropriate nvim instance
                path = nvim_cwd
                nvim = _nvim
        except Exception:
            log.exception("Could not communicate with socket '%s'" % socket)
    return nvim


def main(args):
    cwd = os.getcwd()

    for i, arg in enumerate(args):
        if os.path.isfile(arg):
            args[i] = os.path.realpath(arg)
    args = ' '.join(args)  # TODO: support multiple files... need to iterate
    log.info("Command called with args %r" % args)

    if neovim:
        # First try to find a neovim instance
        nvim = get_neovim_instance(cwd)
        if nvim:
            try:
                nvim.command('edit %s' % args)
                return
            except neovim.api.nvim.NvimError as e:
                # TODO: find a way to detect if the error is critical
                #       eg, exception:
                #           'Vim(edit):E520: Not allowed in a modeline: makeprg=python\\ %'
                #       is not critical
                #       Maybe check if the file is in the list of opened files then in that
                #       case it's ok to return.
                log.exception("nvim exception: %s" % e)
                return

    # Otherwise go the vim way
    servers = getoutput('/usr/bin/vim --serverlist').strip().splitlines()
    log.info("Got servers: %r" % servers)

    server_name = os.path.realpath(cwd).upper()
    server_name_test = server_name

    while server_name_test != '/':
        # Recurse parents and check if a server name is found
        if server_name_test in servers:
            server_name = server_name_test
            break
        server_name_test = os.path.split(server_name_test)[0]

    log.info("Use server name %s for cwd '%s'" % (server_name, cwd))

    if server_name in servers:
        # If a server with current path name exists, always use this one
        log.info("Server %s is found in list" % server_name)
        call('/usr/bin/vim --servername "%s" --remote-tab %s' % (server_name, args))
    elif not sys.stdin.isatty():
        log.info("Calling command not through a tty, so we'll start gvim")
        if os.environ.get('DESKTOP_SESSION') == 'qtile':
            call('qtile-agr --silent switch_group gvim')
        call('gvim --remote-tab %s' % args)
    elif 'nvim' in os.environ['PATH']:
        # When called explicitely, start nvim
        call('nvim %s' % args)
    else:
        # When called explicitely, create a server
        log.info("Creating server %s" % server_name)
        call('vim --servername "%s" %s' % (server_name, args))


if __name__ == '__main__':
    # files = [os.path.realpath(arg) for arg in sys.argv[1:] if os.path.isfile(arg)]
    # getoutput('file -Eb %s')
    args = sys.argv[1:]
    main(args)
