#!/bin/bash
if [[ $# -eq 0 ]] ; then
    echo "Usage: `basename "$0"` [<user>@][<host>:]<dbname>"
    echo
    echo "  Allows to connect to a remote postgresql database (only available"
    echo "  trough unix socket) using local tools (eg: pgcli, pgadmin, ...)."
    echo "  The 'socat' program must be installed on the remote host."
    exit 0
fi

uri=$1
user='root'
shell=${DBSHELL_PROGRAM:-psql}

if [[ $uri == *@* ]]; then
    IFS=@ read -r user uri <<< "$uri"
fi

if [[ $uri == *:* ]]; then
    IFS=: read -r host db <<< "$uri"
else
    db=$uri
    host=$db
    if [[ $DBSHELL_DEFAULT_DOMAIN != "" ]]; then
        host="${host}${DBSHELL_DEFAULT_DOMAIN}"
    fi
fi

# Using mktemp breaks this tool on OSX due to the temp folder lenght meeting the unix socket path limit (103 chars)
# temp=`mktemp -d --suffix="-dbshell-$host"`
temp="/tmp/dbshell-$host.$(date +%s%N)"
temp_socket="${temp}/.s.PGSQL.5432"
mkdir $temp

ssh -N -q -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no ${DBSHELL_SSH_OPTIONS} \
    -L ${temp_socket}:/var/run/postgresql/.s.PGSQL.5432 $user@$host &

echo "Waiting for socket tunnel on ${temp_socket} ..."
while [ ! -e $temp_socket ]; do sleep .5; done

echo "Connecting to $user@$host:$db..."
args="--host=${temp} -d $db -U $user"
$shell $args

rm -rf $temp
kill 0
