#!/usr/bin/env python
# -*- coding: utf-8 -*-
from __future__ import absolute_import, division, print_function

from commands import getoutput
import logging
import os
import sys

if os.path.isdir('/tmp/debug'):
    logging.basicConfig(filename='/tmp/debug/vims.log', level=logging.DEBUG)
_log = logging.getLogger(__name__)

args = sys.argv[1:]

cwd = os.getcwd()
for arg in args:
    if arg.startswith('--cwd='):
        _log.info("Got %s" % arg)
        cwd = arg[6:]
        args.remove(arg)

args = ' '.join(args)  # TODO: escape properly
_log.info("Command called with args %r" % args)

servers = getoutput('vim --serverlist').strip().splitlines()
_log.info("Got servers: %r" % servers)

server_name = os.path.realpath(cwd).upper()
server_name_test = server_name

while server_name_test != '/':
    # Recurse parents and check if a server name is found
    if server_name_test in servers:
        server_name = server_name_test
        break
    server_name_test = os.path.split(server_name_test)[0]

_log.info("Use server name %s for cwd '%s'" % (server_name, cwd))


def call(cmd):
    try:
        _log.info("Calling %s" % cmd)
        ret = os.system(cmd)
        _log.info("Got return value %d" % ret)
    except Exception:
        _log.exception("Error while calling %s" % cmd)

if server_name in servers:
    # If a server with current path name exists, always use this one
    _log.info("Server %s is found in list" % server_name)
    call('vim --servername "%s" --remote-tab %s' % (server_name, args))
elif sys.argv[0] == 'e' or not sys.stdin.isatty():
    # If using the 'e' alias then we open in gvim.
    # It's weird but I'm too used to this, can't go back.
    _log.info("Calling command with shortcut 'e' or not through a tty, so we'll start gvim")
    if os.environ.get('DESKTOP_SESSION') == 'qtile':
        call('qtile-agr --silent switch_group gvim')
    call('gvim --remote-tab %s' % args)
else:
    # When vims is called explicitely, create a server
    _log.info("Creating server %s" % server_name)
    call('vim --servername "%s" %s' % (server_name, args))
