" vim:ft=vim:fdm=marker:nowrap
" ###################################################################
" AMIGrAve's vim config
" https://github.com/amigrave/toothbrush/blob/master/config/vim/vimrc
" ###################################################################
scriptencoding utf-8

" ## CUSTOM PATH ########################################################## {{{
" set default 'runtimepath' (without ~/.vim folders)
let &runtimepath = printf('%s/vimfiles,%s,%s/vimfiles/after', $VIM, $VIMRUNTIME, $VIM)

" what is the name of the directory containing this file?
let s:portable = expand('<sfile>:p:h')

" add the directory to 'runtimepath'
let &runtimepath = printf('%s,%s,%s/after', s:portable, &runtimepath, s:portable)

" XDG Compliance
set backupdir=$XDG_CACHE_HOME/vim/backup
set directory=$XDG_CACHE_HOME/vim/swap
set undodir=$XDG_CACHE_HOME/vim/undo
" }}}

" ## PLUG ################################################################# {{{
call plug#begin(s:portable . '/plugged')

" Languages
Plug 'sheerun/vim-polyglot'

" Navigation
Plug 'scrooloose/nerdtree', { 'on': ['NERDTreeFind', 'NERDTreeToggle'] }
Plug 'junegunn/fzf.vim', { 'on': 'Files' }

" Edition
Plug 'tpope/vim-commentary'

" Look
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

" Git
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'

call plug#end()
" }}}

" ## NVIM DEFAULTS ######################################################## {{{
" https://neovim.io/doc/user/vim_diff.html
set autoindent
" set autoread            " nvim sets autoread but it can lead to data loss
set background=dark
set backspace=indent,eol,start
set belloff=all
set nocompatible
set complete=.,w,b,u,t    " TODO: nvim removes the 'i', check why...\
set cscopeverbose
set encoding=utf8
set history=10000
set hlsearch              " Highlight previous search pattern matches.
set incsearch             " Use incremental search
set laststatus=2          " Status line is always shown
set nrformats=bin,hex
set shortmess=filnxtToO
set showcmd               " Show (partial) command in the last line of the screen
set sidescroll=1          " The minimal number of columns to scroll horizontally
set smarttab
set tabpagemax=50
set ttimeoutlen=50
set wildmenu
" }}}

" ## OPTIONS ############################################################## {{{
" set all&                  " reset all options to compiled in defaults
colorscheme wombat256mod
" colorscheme agr

let mapleader = ","
set clipboard=unnamedplus       " Always use unnamed register (system clipboard)
set fileencoding=utf8
" set fileencodings=utf-8,latin1
set shiftwidth=4                " Number of spaces to use for each step of (auto)
set tabstop=4                   " Number of spaces that a <Tab> in the file counts for
set softtabstop=-1              " Negative value means 'use softtabstop'
set scrolloff=5                 " minimum number of screen lines that you would like
                                " above and below the cursor
set hidden                      " Unused buffers are hidden when abandonned
set ignorecase                  " ignore case when searching
set smartcase                   " ignore case when the pattern contains only lowercase
set smartindent
set list listchars=tab:Â»Â·,trail:Â·,extends:>,precedes:<,nbsp:=
set expandtab
set number                      " precede each line with its line number
set viminfo='200,\"5000,n$XDG_CACHE_HOME/vim/viminfo nowrap

set shortmess+=I                " do not display welcome message
set wildmode=longest:full,full  " Improve autocompletion on command line
set wildignore=*.o,*~,*.pyc

set splitbelow                  " Invert horizontal split order
set splitright                  " Invert vertical split order
set diffopt+=vertical           " Force vertical diff

set tags+=.git/tags
set tags+=.bzr/tags
set tags+="$XDG_CACHE_HOME/vim/tags"

let g:netrw_dirhistmax = 0  " disable creation of ~/.vim/.netrwhist
" }}}

" ## PLATFORM #####################################a####################### {{{
if &t_Co > 2 || has("gui_running")
    syntax on
endif
if v:progname =~? "vless"
    set foldlevelstart=99     " do not fold by default when opening files
endif

" Compatible way to use either :py or :py3 -> :Py
if has("python3")
    command! -nargs=1 Py py3 <args>
else
    command! -nargs=1 Py py <args>
endif

if has("nvim")
    tnoremap <C-Delete> <C-\><C-n>  " get out of terminal mode
    set viminfo='200,\"5000,n$XDG_CACHE_HOME/vim/neoviminfo nowrap  " neovim can't use vim's viminfo and vice-versa
    let &runtimepath = printf('%s/.local/share/nvim/site,%s', $HOME, &runtimepath)
    set inccommand=split
endif

if has('gui')
    set guioptions-=T           " hide toolbar
    " set guioptions-=m           " Remove menu bar
    " set lines=999 columns=999   " Hack: maximize gvim
    set guifont=DejaVu\ Sans\ Mono\ for\ Powerline\ 14

    " Windows handling
    nnoremap <silent> <C-H> :vne<CR>
    "nnoremap <silent> <C-S-L> :rightb vne<CR>
    nnoremap <silent> <C-J> :rightb new<CR>
    nnoremap <silent> <C-K> :new<CR>
    "nnoremap <silent> <C-S-Up> <C-O>:rightb vne<CR>
    nnoremap <silent> <C-S-Right> <C-W>>
    inoremap <silent> <C-S-Right> <C-O><C-W>>
    nnoremap <silent> <C-S-Left> <C-W><
    inoremap <silent> <C-S-Left> <C-O><C-W><
    nnoremap <silent> <C-S-Up> <C-W>+
    inoremap <silent> <C-S-Up> <C-O><C-W>+
    nnoremap <silent> <C-S-Down> <C-W>-
    inoremap <silent> <C-S-Down> <C-O><C-W>-

    nnoremap <silent> <M-D-Left> :tabprevious<CR>
    inoremap <silent> <M-D-Left> <C-O>:tabprevious<CR>
    nnoremap <silent> <M-D-Right> :tabnext<CR>
    inoremap <silent> <M-D-Right> <C-O>:tabnext<CR>

    hi Pmenu guibg=yellow guifg=black
    hi PmenuSel guibg=white guifg=black
    hi Cursor guifg=white guibg=red
    hi FoldColumn guibg=black guifg=gray
endif

if has("gui_macvim")
    set visualbell t_vb=
    set guifont=DejaVu\ Sans\ Mono\ for\ Powerline:h12
    set clipboard=unnamed " Always use unnamed register
endif

if has("win32")
    set clipboard=unnamed " Always use unnamed register
    au GUIEnter * simalt ~x
    set guifont=DejaVu\ Sans\ Mono:h9

    " Note adding ,Syntax above messes up the syntax loading
    " See :help syntax-loading for more info
    autocmd BufNewFile,BufRead * call Highlight_remove_attr("bold")
    autocmd BufNewFile,BufRead * call Highlight_remove_attr("italic")
endif

if &term =~ "screen\\|rxvt"
    "Set the cursor white in cmd-mode and orange in insert mode
    let &t_EI = "\<Esc>]12;white\x9c"
    let &t_SI = "\<Esc>]12;orange\x9c"
    "We normally start in cmd-mode
    silent !echo -e "\e]12;white\x9c"
endif

" iPython macvim
" https://github.com/jkitzes/ipyqtmacvim/
if has("gui_macvim")
    nmap <C-S> "+yy:execute "silent !osascript ~/bin/osx/ipyqtmacvim.scpt"<CR>
    vmap <C-S> "+y:execute "silent !osascript ~/bin/osx/ipyqtmacvim.scpt"<CR>
    nnoremap <Leader>tl ::execute "!osascript ~/bin/osx/new_iterm_window.applescript 'cd %:p:h;tig --follow %:p:t;exit'"<CR>
    nnoremap <Leader>tb ::execute "!osascript ~/bin/osx/new_iterm_window.applescript 'cd %:p:h;tig blame %:p:t +" . line('.') . ";exit'"<CR>
else
    nnoremap <Leader>tl :execute "!urxvt -cd '%:p:h' -e tig --follow %:p:t"<CR>
    nnoremap <Leader>tb :execute "!urxvt -cd '%:p:h' -e tig blame %:p:t +" . line('.')<CR>
    nnoremap <Leader>bb :execute "!urxvt -cd '%:p:h' -e bblame %:p:t +" . line('.')<CR>
endif
"}}}

" ## AUTOCMD & FILETYPES ################################################## {{{
if has("autocmd")
    au FileType vim setlocal keywordprg=:help  " allow to use K on word in order to get vim :help
endif
"}}}

" ## KEYMAPS ############################################################## {{{
set pastetoggle=<F11>

" Folding
nnoremap <silent> <S-Up> zc
inoremap <silent> <S-Up> <C-O>zc
nnoremap <silent> <S-Down> zO
inoremap <silent> <S-Down> <C-O>zO
noremap [a zc
inoremap [a <C-O>zc
noremap [1;5B zc
inoremap [1;5B <C-O>zc
nnoremap <silent> <F4> zR
inoremap <silent> <F4> <C-O>zR
nnoremap <silent> <F5> zM
inoremap <silent> <F5> <C-O>zM

" Broken terminals. Rxvt.
if (&term =~ "xterm") || (&term =~ "vt100")
    set t_kP=[5~ t_kN=[6~ t_kh=[1~ t_@7=[4~
endif

" Keep cursor in place when joining lines
nnoremap J mzJ`z
vnoremap J J`<

" gt open file in new tab
nnoremap gt <C-w>gf

" make gf works like gF (search with line number)
nnoremap gf gF

" Find non-ascii characters
nnoremap <Leader>` /[^\x00-\x7F]<CR>

" Replace by first spell checking proposition
nnoremap <Leader>z z=1<cr><cr>

" Set cwd to current file's directory
nnoremap <Leader>. :lcd %:p:h<CR>

" toggle 
function! ToggleColorColumn()
    if &colorcolumn == 0
        set colorcolumn=79,99,119
    else
        set colorcolumn=0
    endif
endfunction
nnoremap <F6> :call ToggleColorColumn()<CR>
inoremap <F6> <C-O>:call ToggleColorColumn()<CR>

" swap fixed scrolliong
function! ToggleScrolloff()
    if &scrolloff == 999
        set scrolloff=5
    else
        set scrolloff=999
    endif
endfunction
nnoremap <S-F6> :call ToggleScrolloff()<CR>
inoremap <S-F6> <C-O>:call ToggleScrolloff()<CR>

" fixed scrolling with the mouse
noremap <S-MouseUp> <C-E><Down>
noremap <S-MouseDown> <C-Y><Up>

" terminator c-pageup/c-pagedown (escape sequences obtaines with <c-v><key>)
noremap [5;5~ 5<C-Y>5<Up>
inoremap [5;5~ <C-O>5<C-Y>5<Up>
noremap [6;5~ 5<C-E>5<Down>
inoremap [6;5~ <C-O>5<C-E>5<Down>

" editing
vmap <C-R> "_dP
vmap <Backspace> "_d

" tabs and buffers
nnoremap <silent> <F2> :bprevious<CR>
inoremap <silent> <F2> <C-O>:bprevious<CR>
nnoremap <silent> <F3> :bnext<CR>
inoremap <silent> <F3> <C-O>:bnext<CR>
nmap <C-t> :tabnew<CR>
imap <C-t> <Esc>:tabnew<CR>
nnoremap <silent> <F10> :bde<CR>
inoremap <silent> <F10> <C-O>:bde<CR>
nnoremap <silent> <S-F10> :bde!<CR>
inoremap <silent> <S-F10> <C-O>:bde!<CR>
nnoremap <silent> <S-F11> :only<CR>
inoremap <silent> <S-F11> <C-O>:only<CR>

" command! -nargs=* -complete=file E if expand('%')=='' && line('$')==1 && getline(1)=='' | :edit <args> | else | :tabnew <args> | endif
" cabbrev e <c-R>=(getcmdtype()==':' && getcmdpos()==1 ? 'E' : 'e')<cr>

" Convert 2 space indentations to 4
nnoremap <Leader>4 :set ts=2 sts=2 noet<CR>:retab!<CR>:set ts=4 sts=4 et<CR>:retab<CR>
vnoremap <Leader>4 <esc>:set ts=2 sts=2 noet<CR>gv:retab!<CR>:set ts=4 sts=4 et<CR>gv:retab<CR>

" Ctrl+L removes highlighting and triggers GitGutterAll
" then calls normal C-L (redraw)
" added :mode because of glitches when resizing a neovim terminal with airline
if exists(":GitGutterAll")
    nnoremap <C-l> :nohlsearch<CR>:GitGutterAll<CR><C-l>:mode<CR>
else
    nnoremap <C-l> :nohlsearch<CR><C-l>:mode<CR>
endif

" Skip quickfix buffers when bnext, bprevious
" http://stackoverflow.com/questions/28613190/exclude-quickfix-buffer-from-bnext-bprevious
augroup qf
    autocmd!
    autocmd FileType qf set nobuflisted
augroup END
" }}}

" ## PLUGIN CONFIG ######################################################## {{{
" NERD Tree
nnoremap <F12> :NERDTreeFind<CR>
inoremap <F12> <C-O>:NERDTreeFind<CR>
let NERDTreeBookmarksFile=expand("$XDG_CACHE_HOME/vim/NERDTreeBookmarks")
let NERDTreeIgnore=[ '\.pyc$', '\.pyo$', '\.py\$class$', '\.obj$', '\.o$', '\.so$', '\.egg$', '^\.git$', '\.gem$',  '\.rbc$', '\~$']
let NERDTreeShowHidden=1
let g:nerdtree_tabs_open_on_gui_startup=0
let NERDTreeQuitOnOpen=1
let NERDTreeMapCloseDir='<Left>'
let NERDTreeMapUpdir='<C-Left>'
let NERDTreeMapActivateNode='<Right>'
let NERDTreeMapChangeRoot='<C-Right>'

" FZF
if executable('fzf')
    nmap <C-p> :Files<cr>
endif

" airline
let g:airline_powerline_fonts=1
"let g:airline_section_c = "%f [%{FileSize()}]"
let g:airline#extensions#tabline#enabled = 1        " Enable the list of buffers
"let g:airline#extensions#tabline#fnamemod = ':t'    " Show just the filename
let g:airline#extensions#tabline#show_tabs = 0
"let g:airline#extensions#tagbar#flags = 'f'

" commentary
nmap \\ <Plug>CommentaryLine
nmap \<bs> vacgc
nmap \| gcap
vmap \\ gc

" Fugitive
nnoremap <Leader>gy :.GBrowse!<CR>
xnoremap <Leader>gy :'<'>GBrowse!<CR>
nnoremap <Leader>gc :Gcommit<CR>
nnoremap <Leader>gb :Gblame<CR>
nnoremap <Leader>gg <s-v>:Gbrowse<CR>
vnoremap <Leader>gg :Gbrowse<CR>
nnoremap <Leader>gs :Gstatus<CR>
nnoremap <Leader>gd :Gdiff<CR>


" }}}

" ## COMMANDS ############################################################# {{{
command DiffOrig vert new | set bt=nofile | r ++edit # | 0d_ | diffthis
                 \ | wincmd p | diffthis

command ShowFileSize echo GetFileSize()
"}}}

" ## FUNCTIONS ############################################################ {{{
" GetFileSize {{{
function! GetFileSize()
    let bytes = getfsize(expand("%:p"))
    if bytes <= 0
        return ""
    endif
    if bytes < 1024
        return bytes
    else
        return (bytes / 1024) . "K"
    endif
endfunction
" }}}

" EnsureDirExists {{{
" http://stackoverflow.com/questions/1549263/how-can-i-create-a-folder-if-it-doesnt-exist-from-vimrc
function! EnsureDirExists (dir)
  if !isdirectory(a:dir)
    if exists("*mkdir")
      call mkdir(a:dir,'p')
      echo "Created directory: " . a:dir
    else
      echo "Please create directory: " . a:dir
    endif
  endif
endfunction
" }}}
" }}}


"" ################################# POST CONFIG ################################# {{{
call EnsureDirExists($XDG_CACHE_HOME . '/vim/backup')
call EnsureDirExists($XDG_CACHE_HOME . '/vim/swap')
"" }}}
