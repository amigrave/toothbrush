# vi: ft=dosini
[main]

# Enables context sensitive auto-completion. If this is disabled the all
# possible completions will be listed.
smart_completion = True

# Display the completions in several columns. (More completions will be
# visible.)
wider_completion_menu = True

# Multi-line mode allows breaking up the sql statements into multiple lines. If
# this is set to True, then the end of the statements must have a semi-colon.
# If this is set to False then sql statements can't be split into multiple
# lines. End of line (return) is considered as the end of the statement.
multi_line = False

# If multi_line_mode is set to "psql", in multi-line mode, [Enter] will execute
# the current input if the input ends in a semicolon.
# If multi_line_mode is set to "safe", in multi-line mode, [Enter] will always
# insert a newline, and [Esc] [Enter] or [Alt]-[Enter] must be used to execute
# a command.
multi_line_mode = psql

# If set to True, table suggestions will include a table alias
generate_aliases = False

# log_file location.
# In Unix/Linux: ~/.config/pgcli/log
# In Windows: %USERPROFILE%\AppData\Local\dbcli\pgcli\log
# %USERPROFILE% is typically C:\Users\{username}
log_file = default

# keyword casing preference. Possible values "lower", "upper", "auto"
keyword_casing = upper

# casing_file location.
# In Unix/Linux: ~/.config/pgcli/casing
# In Windows: %USERPROFILE%\AppData\Local\dbcli\pgcli\casing
# %USERPROFILE% is typically C:\Users\{username}
casing_file = default

# If generate_casing_file is set to True and there is no file in the above
# location, one will be generated based on usage in SQL/PLPGSQL functions.
generate_casing_file = False

# history_file location.
# In Unix/Linux: ~/.config/pgcli/history
# In Windows: %USERPROFILE%\AppData\Local\dbcli\pgcli\history
# %USERPROFILE% is typically C:\Users\{username}
history_file = default

# Default log level. Possible values: "CRITICAL", "ERROR", "WARNING", "INFO"
# and "DEBUG". "NONE" disables logging.
log_level = INFO

# Order of columns when expanding * to column list
# Possible values: "table_order" and "alphabetic"
asterisk_column_order = table_order

# Default pager.
# By default 'PAGER' environment variable is used
# pager = less -SRXF

# Timing of sql statments and table rendering.
timing = True

# Table format. Possible values: psql, plain, simple, grid, fancy_grid, pipe,
# orgtbl, rst, mediawiki, html, latex, latex_booktabs.
# Recommended: psql, fancy_grid and grid.
table_format = psql

# Syntax Style. Possible values: manni, igor, xcode, vim, autumn, vs, rrt,
# native, perldoc, borland, tango, emacs, friendly, monokai, paraiso-dark,
# colorful, murphy, bw, pastie, paraiso-light, trac, default, fruity
syntax_style = fruity

# Keybindings:
# When Vi mode is enabled you can use modal editing features offered by Vi in the REPL.
# When Vi mode is disabled emacs keybindings such as Ctrl-A for home and Ctrl-E
# for end are available in the REPL.
vi = True

# Error handling
# When one of multiple SQL statements causes an error, choose to either
# continue executing the remaining statements, or stopping
# Possible values "STOP" or "RESUME"
on_error = STOP

# Set threshold for row limit prompt. Use 0 to disable prompt.
row_limit = 1000

# Skip intro on startup and goodbye on exit
less_chatty = True

# Postgres prompt
# \u - Username
# \h - Hostname of the server
# \d - Database name
# \n - Newline
prompt = "\u@\h:\d> "

# Custom colors for the completion menu, toolbar, etc.
[colors]
Token.Menu.Completions.Completion.Current = 'bg:#ffffff #000000'
Token.Menu.Completions.Completion = 'bg:#008888 #ffffff'
Token.Menu.Completions.Meta.Current = 'bg:#44aaaa #000000'
Token.Menu.Completions.Meta = 'bg:#448888 #ffffff'
Token.Menu.Completions.MultiColumnMeta = 'bg:#aaffff #000000'
Token.Menu.Completions.ProgressButton = 'bg:#003333'
Token.Menu.Completions.ProgressBar = 'bg:#00aaaa'
Token.SelectedText = '#ffffff bg:#6666aa'
Token.SearchMatch = '#ffffff bg:#4444aa'
Token.SearchMatch.Current = '#ffffff bg:#44aa44'
Token.Toolbar = 'bg:#222222 #aaaaaa'
Token.Toolbar.Off = 'bg:#222222 #888888'
Token.Toolbar.On = 'bg:#222222 #ffffff'
Token.Toolbar.Search = 'noinherit bold'
Token.Toolbar.Search.Text = 'nobold'
Token.Toolbar.System = 'noinherit bold'
Token.Toolbar.Arg = 'noinherit bold'
Token.Toolbar.Arg.Text = 'nobold'

# Named queries are queries you can execute by name.
[named queries]

# Server settings
settings = ''' SELECT name, setting, unit, context FROM Pg_settings; '''

# Server connections
conninfo = ''' SELECT usename, COUNT(*) FROM Pg_stat_activity GROUP BY usename; '''

# Server activity
activity = '''
    SELECT datname, pid, usename, application_name,client_addr, client_hostname,
           client_port, query, state FROM pg_stat_activity;
'''

# Lock info
locks = '''
    SELECT bl.pid AS blocked_pid, a.usename AS blocked_user, kl.pid AS blocking_pid,
           ka.usename AS blocking_user, a.query AS blocked_statement
    FROM pg_catalog.pg_locks bl
         JOIN pg_catalog.pg_stat_activity a ON bl.pid = a.pid
         JOIN pg_catalog.pg_locks kl
         JOIN pg_catalog.pg_stat_activity ka ON kl.pid = ka.pid ON bl.transactionid = kl.transactionid
              AND bl.pid != kl.pid
    WHERE NOT bl.granted;
'''

# Waiting queries
waits = '''
    SELECT pg_stat_activity.pid, pg_stat_activity.query, pg_stat_activity.waiting,
           now() - pg_stat_activity.query_start AS "totaltime", pg_stat_activity.backend_start
    FROM pg_stat_activity WHERE pg_stat_activity.query !~ '%IDLE%'::text AND pg_stat_activity.waiting = true;
'''

# Show slow queries
slowqueries = '''
    CREATE extension if not exists pg_stat_statements;
    SELECT (total_time / 1000 / 60) as total_minutes, (total_time/calls) as average_time, query
    FROM pg_stat_statements ORDER BY 1 DESC LIMIT 100;
'''

# Database Size
dbsize = '''
    SELECT datname, pg_size_pretty(pg_database_size(datname)) db_size
    FROM pg_database ORDER BY pg_database_size(datname) DESC;
'''

# Table size
tablesize = '''
    SELECT table_schema, table_name, pg_size_pretty(size) as size, pg_size_pretty(total_size) as total_size
    FROM (
        SELECT table_schema, table_name, pg_relation_size( quote_ident( table_schema ) || '.' || quote_ident( table_name ) ) as size,
               pg_total_relation_size( quote_ident( table_schema ) || '.' || quote_ident( table_name ) ) as total_size
        FROM information_schema.tables WHERE table_type = 'BASE TABLE' and table_schema not in ('information_schema', 'pg_catalog')
        ORDER BY pg_relation_size( quote_ident( table_schema ) || '.' || quote_ident( table_name ) ) desc, table_schema, table_name
    ) x ORDER BY x.size DESC, x.total_size DESC, table_schema, table_name;
'''

# Useless Columns
uselesscol = '''
    SELECT nspname, relname, attname, typname, (stanullfrac*100)::int AS null_percent,
           CASE WHEN stadistinct >= 0 THEN stadistinct ELSE abs(stadistinct)*reltuples END AS "distinct",
           CASE 1 WHEN stakind1 THEN stavalues1 WHEN stakind2 THEN stavalues2 END AS "values"
    FROM pg_class c
         JOIN pg_namespace ns ON (ns.oid=relnamespace)
         JOIN pg_attribute ON (c.oid=attrelid)
         JOIN pg_type t ON (t.oid=atttypid)
         JOIN pg_statistic ON (c.oid=starelid AND staattnum=attnum)
    WHERE nspname NOT LIKE E'pg\\_%' AND nspname != 'information_schema' AND relkind='r'
          AND NOT attisdropped AND attstattarget != 0 AND reltuples >= 100 AND stadistinct BETWEEN 0 AND 1
    ORDER BY nspname, relname, attname;
'''

# Server uptime
uptime = '''
    SELECT now() - pg_postmaster_start_time() AS uptime;
'''

# Show Custom PL functions
functions = '''
    SELECT proname as name, proargnames as arguments, prosrc as source
    FROM pg_catalog.pg_namespace n JOIN pg_catalog.pg_proc p ON pronamespace = n.oid
    WHERE nspname = 'public';
'''

# Drop all PL functions
dropfunctions = '''/* Drop all PL/* functions */
    SELECT 'DROP FUNCTION ' || ns.nspname || '.' || proname || '(' || oidvectortypes(proargtypes) || ');' AS agr
    FROM pg_proc INNER JOIN pg_namespace ns ON (pg_proc.pronamespace = ns.oid)
    WHERE ns.nspname = 'public' ORDER BY proname;
'''

# Show create table SQL
show_create_table = '''
    SELECT
      tc.constraint_name,
      tc.constraint_type,
      tc.table_name,
      kcu.column_name,
      tc.is_deferrable,
      tc.initially_deferred,
      rc.match_option AS match_type,

      rc.update_rule AS on_update,
      rc.delete_rule AS on_delete,
      ccu.table_name AS references_table,
      ccu.column_name AS references_field

    FROM information_schema.table_constraints tc

    LEFT JOIN information_schema.key_column_usage kcu
      ON tc.constraint_catalog = kcu.constraint_catalog
      AND tc.constraint_schema = kcu.constraint_schema
      AND tc.constraint_name = kcu.constraint_name

    LEFT JOIN information_schema.referential_constraints rc
      ON tc.constraint_catalog = rc.constraint_catalog
      AND tc.constraint_schema = rc.constraint_schema
      AND tc.constraint_name = rc.constraint_name

    LEFT JOIN information_schema.constraint_column_usage ccu
      ON rc.unique_constraint_catalog = ccu.constraint_catalog
      AND rc.unique_constraint_schema = ccu.constraint_schema
      AND rc.unique_constraint_name = ccu.constraint_name

    --- any conditions for table etc. filtering
    WHERE lower(tc.constraint_type) in ('foreign key')
'''

# Display number of records in database per table
number_of_records = '''
    SELECT table_schema,
           table_name,
           (xpath('/row/cnt/text()', xml_count))[1]::text::int as row_count
    FROM (
        SELECT table_name, table_schema,
             query_to_xml(format('SELECT count(*) AS cnt FROM %I.%I', table_schema, table_name), false, true, '') AS xml_count
        FROM information_schema.tables
        WHERE table_schema = 'public'
    ) t
'''

# Display total number of records in database
number_of_records_total = '''
    SELECT
        sum((xpath('/row/cnt/text()', xml_count))[1]::text::int)
    FROM (
        SELECT table_name, table_schema,
             query_to_xml(format('SELECT count(*) AS cnt FROM %I.%I', table_schema, table_name), false, true, '') AS xml_count
        FROM information_schema.tables
        WHERE table_schema = 'public'
    ) t
'''

# DNS to call by -D option
[alias_dsn]
# example_dsn = postgresql://[user[:password]@][netloc][:port][/dbname]
