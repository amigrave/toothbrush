# vim: ft=sh:fdm=marker:

# Warning: This main profile should keep /bin/sh compatibility (eg: no [[ tests)
#          because it is sourced by Xsession.

# Global environment {{{
if [ -z "$AMIGRAVE" ]; then
    echo "start.sh has not been executed or sourced as .profile, .bashrc or .zshrc"
    echo "You can symlink start.sh to one of those files using 'start.sh -i'"
    return
fi

export LANG=en_US.UTF-8
export LC_ALL=$LANG
export LC_CTYPE=$LANG
export LC_COLLATE=C

# Applicatons
export EDITOR=vim
export VISUAL=vim
export TERMINAL=terminator
export BROWSER=google-chrome

export VIMINIT='let $MYVIMRC="$DOTFILES/vim/vimrc" | source $MYVIMRC'
export LESS="--no-init --ignore-case --LONG-PROMPT --silent --tabs=4 -R -F"
export LS_OPTIONS='--color=auto'

# https://gist.github.com/cjbarnes18/4078704
# enable this for non-reparenting window managers
export _JAVA_AWT_WM_NONREPARENTING=1

# Set up paths
PATH=$AMIGRAVE/bin:$PATH

if [ -d "$HOME/bin" ]; then
    PATH=$HOME/bin:$PATH
fi

if [ -d "$HOME/.local/bin" ]; then
    PATH=$HOME/.local/bin:$PATH
fi

# TODO: do the following properly for all python versions
if [ -d "$HOME/Library/Python/2.7/bin" ]; then
    PATH=$HOME/Library/Python/2.7/bin:$PATH
fi

python_site_package=$HOME/.local/lib/python2.7/site-packages/

if [ -d "$HOME/Library/Python/2.7/lib/python/site-packages" ]; then
    python_site_package=$HOME/Library/Python/2.7/lib/python/site-packages
fi

if [ -f "$python_site_package" ]; then
    export PYTHONPATH=$python_site_package:$PYTHONPATH
fi

export XDG_CONFIG_HOME=$DOTFILES
export XDG_CACHE_HOME=$HOME/.cache
export XDG_DATA_HOME=$HOME/.local

# Programs that does not conform to the XDG directory specification
export MC_SKIN=$DOTFILES/mc/skins/agr.ini
export PYTHONSTARTUP=$DOTFILES/python/shell_startup.py
export ZDOTDIR=$DOTFILES/zsh
export MPLAYER_HOME=$DOTFILES/mplayer
export MPV_HOME=$DOTFILES/mpv
export CMUS_HOME=$DOTFILES/cmus
export IPYTHONDIR=$DOTFILES/ipython
export INPUTRC=$DOTFILES/inputrc
export SCREENRC=$DOTFILES/screenrc
export IRBRC=$DOTFILES/irbrc
export LFTP_HOME=$DOTFILES/lftp
export MPV_HOME=$DOTFILES/mpv
export HTTPIE_CONFIG_DIR=$DOTFILES/httpie
export PSQLRC=$DOTFILES/postgresql/psqlrc
export WGETRC=$DOTFILES/wgetrc
export GIMP2_DIRECTORY="$DOTFILES/gimp"
export ATOM_HOME="$DOTFILES/atom"
export NPM_CONFIG_USERCONFIG=$DOTFILES/npm/npmrc

export DVDCSS_CACHE=$XDG_CACHE_HOME/dvdcss/
export LESSHISTFILE=$XDG_CACHE_HOME/less_history
export ERRFILE=$XDG_CACHE_HOME/xsession-errors.log
export BZR_LOG=/dev/null
# }}}

# Node {{{
NODE_PATH=''
if [ -d "/usr/lib/node_modules" ]; then
    NODE_PATH=/usr/lib/node_modules
fi
if [ -d "/usr/local/lib/node_modules" ]; then
    NODE_PATH=/usr/local/lib/node_modules:$NODE_PATH
fi
export NODE_PATH
# }}}

# Homebrew {{{
if [ -d "/usr/local/Cellar/coreutils" ]; then
    MANPATH="/usr/local/opt/coreutils/libexec/gnuman:$MANPATH"
    PATH="/usr/local/sbin:/usr/local/opt/coreutils/libexec/gnubin:$PATH"
fi
# }}}

# Load local profile if any {{{
if [ -f "$XDG_CONFIG_HOME/profile_local" ]; then
    # Warning: the local_profile is not linked to $XDG_CONFIG_HOME in the git
    #          repo. It's created from a template using the `profile` command
    . $XDG_CONFIG_HOME/profile_local
fi
# }}}

# Load interactive profile if permitted {{{
if [ -n "$PS1" ] && [ "$NOT_INTERACTIVE" != "1" ]; then
    source $DOTFILES/profile_interactive
fi
# }}}
