\set QUIET ON
\set HISTFILE ~/.cache/psql_history- :DBNAME
\set HISTSIZE 2000
\set HISTCONTROL ignoredups
\setenv PAGER less
\setenv LESS '-iMSx4 -FX'

\set PROMPT1 '%[%033[0;33;32m%]%/%[%033[0m%] on %[%033[0;33;33m%]%n%@%M%[%033[0m%] %[%033[37;1m%]%x%[%033[0m%]%R> '
\set PROMPT2 '%R> '

-- \pset null 'âˆ…'
\pset null 'NULL'
-- \pset linestyle unicode
\pset border 1
-- \x auto
\set COMP_KEYWORD_CASE upper


\set QUIET OFF

\echo 'Administrative queries:\n'
-- Taken from http://opensourcedbms.com/dbms/psqlrc-psql-startup-file-for-postgres/

\echo '\t:settings\t-- Server Settings'
\set settings 'select name, setting,unit,context from pg_settings;'

\echo '\t:conninfo\t-- Server connections'
\set conninfo 'select usename, count(*) from pg_stat_activity group by usename;'

\echo '\t:activity\t-- Server activity'
\set activity 'select datname, pid, usename, application_name,client_addr, client_hostname, client_port, query, state from pg_stat_activity;'

\echo '\t:blocked\t-- Check Transactional Locks / Blocking'
-- https://sqlconjuror.com/postgresql-check-transactional-locks-blocking/
\set QUIET 1
select
$$
    SELECT
      bl.pid AS blocked_pid,
      a.usename AS blocked_user,
      ka.query AS current_or_recent_statement_in_blocking_process,
      ka.state AS state_of_blocking_process,
      now() - ka.query_start AS blocking_duration,
      kl.pid AS blocking_pid,
      ka.usename AS blocking_user,
      a.query AS blocked_statement,
      now() - a.query_start AS blocked_duration
    FROM
      pg_catalog.pg_locks bl
      JOIN pg_catalog.pg_stat_activity a ON a.pid = bl.pid
      JOIN pg_catalog.pg_locks kl ON kl.transactionid = bl.transactionid
      AND kl.pid != bl.pid
      JOIN pg_catalog.pg_stat_activity ka ON ka.pid = kl.pid
    WHERE
      NOT bl.GRANTED;
$$ AS blocked \gset

\echo '\t:frozenxid\t-- Show frozen max xid'
\set frozenxid 'SELECT datname, age(datfrozenxid) FROM pg_database ORDER BY 2 DESC;'

\echo '\t:slowqueries\t-- Show slow queries'
\set slowqueries 'CREATE extension if not exists pg_stat_statements; SELECT (total_time / 1000 / 60) as total_minutes, (total_time/calls) as average_time, query FROM pg_stat_statements ORDER BY 1 DESC LIMIT 100;'

\echo '\t:dbsize\t\t-- Database Size'
\set dbsize 'SELECT datname, pg_size_pretty(pg_database_size(datname)) db_size FROM pg_database ORDER BY pg_database_size(datname) DESC;'

\echo '\t:tablesize\t-- Tables Size'
\set QUIET 1
select
$$
    SELECT table_schema, table_name, pg_size_pretty(size) AS size, pg_size_pretty(total_size) AS total_size
      FROM (SELECT table_schema, table_name,
                   pg_relation_size( quote_ident( table_schema ) || '.' || quote_ident( table_name ) ) AS size,
                   pg_total_relation_size( quote_ident( table_schema ) || '.' || quote_ident( table_name ) ) as total_size
              FROM information_schema.tables
             WHERE table_type = 'BASE TABLE'
               AND table_schema NOT IN ('information_schema', 'pg_catalog')
          ORDER BY pg_relation_size( quote_ident( table_schema ) || '.' || quote_ident( table_name ) ) DESC, table_schema, table_name) x
  ORDER BY x.total_size desc, table_schema, table_name;
$$ AS tablesize \gset

\echo '\t:toast\t\t-- Tables Toast'
\set QUIET 1
select
$$
    SELECT x.relation, pg_size_pretty(x.total_size) total, pg_size_pretty(x.size) notoast,
           pg_size_pretty(index_size) as index, pg_size_pretty(x.total_size-x.size-index_size) toast,
           x.num_rows, x.dead_rows
    FROM (
        SELECT C.relname AS relation, pg_relation_size(C.oid) AS "size", pg_indexes_size(C.oid) as "index_size",
               pg_total_relation_size(C.oid) AS "total_size", S.n_live_tup as num_rows, S.n_dead_tup as dead_rows
        FROM pg_class C
            LEFT JOIN pg_namespace N ON (N.oid = C.relnamespace)
            LEFT JOIN pg_stat_user_tables S ON (S.relid=C.oid)
        WHERE nspname NOT IN ('pg_catalog', 'information_schema')
            AND C.relkind <> 'i'
            AND nspname !~ '^pg_toast'
    ) x
    ORDER BY x.total_size-x.size DESC
    LIMIT 20;
$$ AS toast \gset

-- Top row size would be cool, but can't pass parameters (tablename) to those snippets and doing it on
-- all tables will just crawl all tables
-- SELECT id, octet_length(t.*::text) FROM linked_partner_rel AS t ORDER BY 2 DESC LIMIT 10;

\echo '\t:uselesscol\t-- Useless columns'
-- This query finds columns in the whole database that have no more than 1 distinct value in its table, using planner's estimates.
-- This is useful for finding redundant and unused columns.
-- https://wiki.postgresql.org/wiki/Finding_useless_columns
\set QUIET 1
select
$$
    select nspname, relname, attname, typname,
        (stanullfrac*100)::int as null_percent,
        case when stadistinct >= 0 then stadistinct else abs(stadistinct)*reltuples end as "distinct",
        case 1 when stakind1 then stavalues1 when stakind2 then stavalues2 end as "values"
    from pg_class c
    join pg_namespace ns on (ns.oid=relnamespace)
    join pg_attribute on (c.oid=attrelid)
    join pg_type t on (t.oid=atttypid)
    join pg_statistic on (c.oid=starelid and staattnum=attnum)
    where nspname not like E'pg\\_%' and nspname != 'information_schema'
      and relkind='r' and not attisdropped and attstattarget != 0
      and reltuples >= 100              -- ignore tables with fewer than 100 rows
      and stadistinct between 0 and 1   -- 0 to 1 distinct values
    order by nspname, relname, attname;
$$ AS uselesscol \gset

\echo '\t:uptime\t\t-- Server uptime'
\set uptime 'select now() - pg_postmaster_start_time() AS uptime;'

\echo '\t:functions\t-- Custom PL functions'
\set functions 'SELECT proname as name, proargnames as arguments, prosrc as source FROM pg_catalog.pg_namespace n JOIN pg_catalog.pg_proc p ON pronamespace = n.oid WHERE nspname = \'public\';'

\echo '\t:dropfunctions\t-- Drop Custom PL functions'
\set dropfunctions 'SELECT \'DROP FUNCTION \' || ns.nspname || \'.\' || proname || \'(\' || oidvectortypes(proargtypes) || \');\' as agr FROM pg_proc INNER JOIN pg_namespace ns ON (pg_proc.pronamespace = ns.oid) WHERE ns.nspname = \'public\'  order by proname;'

-- CREATE LANGUAGE plpython3u;
\echo '\t:def\t\t-- Define a new pl/python function'
\set def '\\prompt \'Name of function: \' fname \\; CREATE OR REPLACE FUNCTION :fname(name text DEFAULT \'\') RETURNS text LANGUAGE plpython3u AS $function$\n\n_name = name or "Anonymous"\nreturn "Hello %s" % _name\n\n$function$; '

\echo '\t:menu\t\t-- Show this Menu'
\set menu '\\i ~/amigrave/config/.xdg/postgresql/psqlrc'


\timing

-- vim:ft=plsql:
